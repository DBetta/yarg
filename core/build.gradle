import java.nio.file.Files
import java.nio.file.Paths

//todo mavenUploadPlugin

def projectName = "YARG (Yet another report generator)"
def projectDescription = "Open source library for report generation. Provided by Haulmont."
def projectUrl = "https://github.com/Haulmont/yarg"

def artifactVersion = '1.0-SNAPSHOT'
if (rootProject.hasProperty('buildVersion')) {
    artifactVersion = rootProject['buildVersion']
}
def isSnapshot = artifactVersion.endsWith('-SNAPSHOT')

def api = project(':yarg-api')
def core = project(':yarg')

def repositoryUser = System.getenv('HAULMONT_REPOSITORY_USER')
def repositoryPassword, repositoryUrl, workRepositoryUrl;

if (repositoryUser) {//for internal users
    repositoryPassword = System.getenv('HAULMONT_REPOSITORY_PASSWORD')
    repositoryUrl = 'http://repository.haulmont.com:8587/nexus/content'
    workRepositoryUrl = "$repositoryUrl/groups/work"
} else {//for external users
    repositoryUser = 'cuba'
    repositoryPassword = 'cuba123'
    repositoryUrl = 'https://repo.cuba-platform.com/content'
    workRepositoryUrl = "$repositoryUrl/groups/work"
}

apply(plugin: 'java')
apply(plugin: 'idea')

configure([api, core]) {
    apply(plugin: 'java')
    apply(plugin: 'idea')
    apply(plugin: 'maven')
    apply(plugin: 'signing')

    group = 'com.haulmont.yarg'
    version = artifactVersion

    repositories {
        mavenCentral()
        maven {
            credentials {
                username repositoryUser
                password repositoryPassword
            }
            url workRepositoryUrl
        }
    }

    sourceSets {
        main {
            java { srcDir 'src' }
            resources { srcDir 'src' }
        }

        test {
            java { srcDir 'test' }
            resources { srcDir 'test' }
        }
    }

    configurations {
        deployerJars
        sourceArchives
    }

    dependencies {
        compile(group: 'com.google.guava', name: 'guava', version: '13.0.1')
        deployerJars(group: 'org.apache.maven.wagon', name: 'wagon-http', version: '1.0-beta-2')
    }

    task sourceJar(type: Jar) {
        from sourceSets.main.java
        classifier = 'sources'
    }

    task javadocJar(type: Jar, dependsOn: javadoc) {
        classifier = 'javadoc'
        from javadoc.destinationDir
    }

    artifacts {
        archives sourceJar
        archives javadocJar
    }

    uploadArchives.configure {
        repositories.mavenDeployer {
            name = 'httpDeployer'
            configuration = configurations.deployerJars
            repository(url: "$repositoryUrl/repositories/" + (isSnapshot ? 'snapshots' : 'releases')) {
                authentication(userName: repositoryUser, password: repositoryPassword)
            }

            pom.project {
                name = "$projectName"
                description = "$projectDescription"
                url = "$projectUrl"
                developers {
                    developer {
                        id 'tinhol'
                        email 'tinhol@mail.ru'
                        organization = 'Haulmont'
                        organizationUrl 'http://www.haulmont.com/'
                    }
                }
                scm {
                    connection = "$projectUrl"
                    url = "$projectUrl"
                }
                licenses {
                    license {
                        name 'The Apache Software License, Version 2.0'
                        url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                        distribution 'repo'
                    }
                }
            }
        }
    }

    install.configure {
        repositories.mavenInstaller {
            pom.project {
                name = "$projectName"
                description = "$projectDescription"
                url = "$projectUrl"
                developers {
                    developer {
                        id 'tinhol'
                        email 'tinhol@mail.ru'
                        organization = 'Haulmont'
                        organizationUrl 'http://www.haulmont.com/'
                    }
                }
                scm {
                    connection = "$projectUrl"
                    url = "$projectUrl"
                }
                licenses {
                    license {
                        name 'The Apache Software License, Version 2.0'
                        url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                        distribution 'repo'
                    }
                }
            }
        }
    }

    if (signing.hasProperty('keyId')) {
        signing {
            sign configurations.archives
        }
    }
}

configure(api) {

}

configure(core) {
    apply(plugin: 'application')

    assemble {
        new File("result").mkdir();
        new File("result/integration").mkdir();
        new File("result/smoke").mkdir();
        new File("result/sample").mkdir();
        new File("result/console").mkdir();
    }

    dependencies {
        compile(api)
        compile(group: 'commons-cli', name: 'commons-cli', version: '1.2')
        compile(group: 'commons-logging', name: 'commons-logging', version: '1.1.1')
        compile(group: 'commons-lang', name: 'commons-lang', version: '2.6')
        compile(group: 'commons-collections', name: 'commons-collections', version: '3.2.1')
        compile(group: 'commons-io', name: 'commons-io', version: '1.4')
        compile(group: 'commons-dbcp', name: 'commons-dbcp', version: '1.4')
        compile(group: 'dom4j', name: 'dom4j', version: '1.6.1')
        compile(group: 'log4j', name: 'log4j', version: '1.2.16')
        compile(group: 'org.slf4j', name: 'slf4j-api', version: '1.7.5')
        compile(group: 'org.slf4j', name: 'slf4j-log4j12', version: '1.7.5')
        compile(group: 'org.codehaus.groovy', name: 'groovy-all', version: '2.1.6')
        compile(group: 'antlr', name: 'antlr', version: '2.7.7')
        compile(group: 'asm', name: 'asm', version: '3.3.1')
        compile(group: 'org.antlr', name: 'antlr-runtime', version: '3.2')
        compile(group: 'org.freemarker', name: 'freemarker', version: '2.3.16')
        compile(group: 'org.openoffice', name: 'juh', version: '3.0.0')
        compile(group: 'org.openoffice', name: 'ridl', version: '3.0.0')
        compile(group: 'org.openoffice', name: 'unoil', version: '3.0.0')
        compile(group: "org.apache.avalon.framework", name: "avalon-framework-api", version: '4.3.1')
        compile(group: "org.apache.avalon.framework", name: "avalon-framework-impl", version: '4.3.1')
        compile(group: "org.apache.xmlgraphics", name: "fop", version: "1.0")
        compile(group: "org.apache.xmlgraphics", name: "xmlgraphics-commons", version: "1.5")
        compile(group: "org.plutext", name: "jaxb-svg11", version: "1.0.2")
        compile(group: "org.plutext", name: "jaxb-xslfo", version: "1.0.1")
        compile(group: "org.plutext", name: "jaxb-xmldsig-core", version: "1.0.0")
        compile(group: "org.apache.xmlgraphics", name: "batik-bridge", version: "1.7")
        compile(group: "org.apache.xmlgraphics", name: "batik-svggen", version: "1.7")
        compile(group: "org.apache.xmlgraphics", name: "batik-awt-util", version: "1.7")
        compile(group: "org.apache.xmlgraphics", name: "batik-css", version: "1.7")
        compile(group: "xalan", name: "xalan", version: "2.7.1")
        compile(group: "xalan", name: "serializer", version: "2.7.1")
        compile(group: "com.lowagie", name: "itext", version: "2.1.0") {
            exclude(group: 'org.bouncycastle')
            exclude(group: 'bouncycastle')
        }
        compile(group: 'com.haulmont.thirdparty', name: 'poi', version: '3.9.20130515')
        compile(group: 'org.apache.poi', name: 'poi-scratchpad', version: '3.9') {
            exclude(group: 'org.apache.poi', module: 'poi')
        }
        compile(group: 'commons-codec', name: 'commons-codec', version: '1.6')
        compile(group: 'org.xhtmlrenderer', name: 'flying-saucer-core', version: '9.0.6')
        compile(group: 'org.xhtmlrenderer', name: 'flying-saucer-pdf', version: '9.0.6') {
            exclude(group: 'org.bouncycastle')
            exclude(group: 'bouncycastle')
        }
        compile(group: "org.docx4j", name: "docx4j", version: "3.1.0") {
            exclude(group: 'org.apache.poi', module: 'poi')
        }
        compile(group: "com.jayway.jsonpath", name: "json-path", version: "0.9.1")

        testCompile(group: 'junit', name: 'junit', version: '4.5')
        testCompile(group: 'hsqldb', name: 'hsqldb', version: '1.8.0.10')
    }

    jar {
        from "src/log4j.xml"
        from "src/reporting.xsd"
    }

    mainClassName = "com.haulmont.yarg.console.ConsoleRunner"

    startScripts << {
        copy {
            from "reporting.properties"
            into outputDir
        }
    }

    installApp << {
        def outputDir = destinationDir
        copy {
            from "reporting.properties"
            into "$outputDir/bin"
        }
    }

    test {
        workingDir = new File('../..')
    }
}